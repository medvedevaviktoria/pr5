//Есть 4 основных шага в создании плана:
//-Создать направление - создает направление для поезда (к примеру Бийск - Барнаул). Маршрут составляется случайным выбором двух городов из списка, состоящего, минимум, из 15-и городов. Начальная и конечная точки маршрута должны быть различны.
//-Продать билеты - вы получаете рандомное кол-во пассажиров, которые купили билеты на это направление. Количество пассажиров находится в диапазоне от 5-и до 201
//-Сформировать поезд - вы создаете поезд и добавляете ему столько вагонов (вместительность каждого вагона определяется рандомно и находится в диапазоне от 5 до 25), сколько хватит для перевозки всех пассажиров. То есть вы прибавляете к поезду по одному вагону рандомной вместительности до тех пор, пока не усадите в них всех пассажиров, купивших билеты
//-Отправить поезд - вы отправляете поезд, после чего можете снова создать направление. Программа выдает запрос на окончание или продолжение работы. То есть программа работает до тех пор, пока пользователь не введет слово EXIT.
//
//   После каждого этапа выдается соответствующая информация. После 4-го шага программа сообщает, что поезд [направление], состоящий из [количество] вагонов отправлен. Также выдается информация о вместимости каждого вагона и количестве пассажиров в каждом вагоне.
//
//   Программа не должна "падать" при вводе неправильных значений
import kotlin.random.Random
fun main() {

    var StopTrain = true
    while (StopTrain)
    {
        println("Шаг 1. Создать направление поезда")
        val EnterDirection = Direction()
        println( "Поезд следует по направлению ${EnterDirection.direction}")

        println("\nШаг 2. Продать билеты")
        val passengers = CashDesk(5, 201)

        println("\nШаг 3. Сформировать поезд")
        val train = Train(passengers.people)

        println("\nШаг 4. Отправить поезд")
        DepatureTrain(EnterDirection.direction, train.vagonNum)

        println("\nВыберите, что вы хотите сделать:\nВыйти - exit\nИначе - составить поезд")
        val variant=readln().lowercase()
        if (variant=="exit")
            StopTrain=false

    }

}